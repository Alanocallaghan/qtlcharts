// Generated by CoffeeScript 1.6.3
var iplotScanone_pxg;

iplotScanone_pxg = function(lod_data, pxg_data) {
  var g_lod, h, margin, markers, mychart, mylodchart, plotPXG, svg, totalh, totalw, wleft, wright, x;
  markers = (function() {
    var _results;
    _results = [];
    for (x in pxg_data.chrByMarkers) {
      _results.push(x);
    }
    return _results;
  })();
  h = 450;
  wleft = 700;
  wright = 300;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  totalh = h + margin.top + margin.bottom;
  totalw = wleft + wright + (margin.left + margin.right) * 2;
  mychart = lodchart().lodvarname("lod").height(h).width(wleft).margin(margin);
  mylodchart = lodchart().lodvarname("lod").height(h).width(wleft).margin(margin);
  svg = d3.select("div#chart").append("svg").attr("height", totalh).attr("width", totalw);
  g_lod = svg.append("g").attr("id", "lodchart").datum(lod_data).call(mychart);
  plotPXG = function(markername, markerindex) {
    var chr, chrtype, g, gabs, genonames, inferred, mypxgchart, _i, _ref, _results;
    svg.select("g#pxgchart").remove();
    console.log(markername, markerindex);
    g = pxg_data.geno[markerindex];
    gabs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        x = g[_i];
        _results.push(Math.abs(x));
      }
      return _results;
    })();
    inferred = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        x = g[_i];
        _results.push(x < 0);
      }
      return _results;
    })();
    console.log([g, gabs, inferred, pxg_data.pheno]);
    chr = pxg_data.chrByMarkers[markername];
    chrtype = pxg_data.chrtype[chr];
    genonames = pxg_data.genonames[chrtype];
    mypxgchart = dotchart().height(h).width(wright).margin(margin).xcategories((function() {
      _results = [];
      for (var _i = 1, _ref = genonames.length; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this)).xcatlabels(genonames).dataByInd(false).xlab(markername).ylab("Phenotype");
    svg.append("g").attr("id", "pxgchart").attr("transform", "translate(" + (wleft + margin.left + margin.right) + ",0)").datum([gabs, pxg_data.pheno]).call(mypxgchart);
    return mypxgchart.pointsSelect().attr("fill", function(d, i) {
      if (inferred[i]) {
        return "Orchid";
      }
      return "slateblue";
    });
  };
  return mychart.markerSelect().on("click", function(d, i) {
    return plotPXG(markers[i], i);
  });
};

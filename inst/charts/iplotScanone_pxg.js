// Generated by CoffeeScript 1.7.1
var iplotScanone_pxg;

iplotScanone_pxg = function(lod_data, pxg_data, chartOpts) {
  var g_lod, height, margin, markers, mylodchart, plotPXG, pointcolor, pointcolorhilit, svg, totalh, totalw, wleft, wright, x, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
  markers = (function() {
    var _results;
    _results = [];
    for (x in pxg_data.chrByMarkers) {
      _results.push(x);
    }
    return _results;
  })();
  height = (_ref = chartOpts != null ? chartOpts.height : void 0) != null ? _ref : 450;
  wleft = (_ref1 = chartOpts != null ? chartOpts.wleft : void 0) != null ? _ref1 : 700;
  wright = (_ref2 = chartOpts != null ? chartOpts.wright : void 0) != null ? _ref2 : 300;
  margin = (_ref3 = chartOpts != null ? chartOpts.margin : void 0) != null ? _ref3 : {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  pointcolor = (_ref4 = chartOpts != null ? chartOpts.pointcolor : void 0) != null ? _ref4 : "slateblue";
  pointcolorhilit = (_ref5 = chartOpts != null ? chartOpts.pointcolorhilit : void 0) != null ? _ref5 : "Orchid";
  totalh = height + margin.top + margin.bottom;
  totalw = wleft + wright + (margin.left + margin.right) * 2;
  mylodchart = lodchart().lodvarname("lod").height(height).width(wleft).margin(margin);
  svg = d3.select("div#chart").append("svg").attr("height", totalh).attr("width", totalw);
  g_lod = svg.append("g").attr("id", "lodchart").datum(lod_data).call(mylodchart);
  plotPXG = function(markername, markerindex) {
    var chr, chrtype, g, gabs, genonames, inferred, mypxgchart, _i, _ref6, _results;
    svg.select("g#pxgchart").remove();
    g = pxg_data.geno[markerindex];
    gabs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        x = g[_i];
        _results.push(Math.abs(x));
      }
      return _results;
    })();
    inferred = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        x = g[_i];
        _results.push(x < 0);
      }
      return _results;
    })();
    chr = pxg_data.chrByMarkers[markername];
    chrtype = pxg_data.chrtype[chr];
    genonames = pxg_data.genonames[chrtype];
    mypxgchart = dotchart().height(height).width(wright).margin(margin).xcategories((function() {
      _results = [];
      for (var _i = 1, _ref6 = genonames.length; 1 <= _ref6 ? _i <= _ref6 : _i >= _ref6; 1 <= _ref6 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this)).xcatlabels(genonames).dataByInd(false).title(markername).xlab("Genotype").ylab("Phenotype").xvar('geno').yvar('pheno');
    svg.append("g").attr("id", "pxgchart").attr("transform", "translate(" + (wleft + margin.left + margin.right) + ",0)").datum({
      'geno': gabs,
      'pheno': pxg_data.pheno,
      'indID': pxg_data.indID
    }).call(mypxgchart);
    return mypxgchart.pointsSelect().attr("fill", function(d, i) {
      if (inferred[i]) {
        return pointcolorhilit;
      }
      return pointcolor;
    });
  };
  return mylodchart.markerSelect().on("click", function(d, i) {
    return plotPXG(markers[i], i);
  });
};

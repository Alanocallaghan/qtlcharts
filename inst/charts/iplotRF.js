// Generated by CoffeeScript 1.7.1
var Z, iplotRF;

Z = null;

iplotRF = function(rf_data, geno, chartOpts) {
  var axispos, bordercolor, cellHeight, cellPad, cellWidth, chartdivid, chrGap, chrtype, col, colors, crosstab_height, crosstab_width, fontsize, g_heatmap, heatmap_height, heatmap_width, hilitcolor, lodlim, lodonly, margin, max_ngeno, mychrheatmap, nullcolor, oneAtTop, pixelPerCell, rectcolor, rflim, rfonly, rftran, row, svg, totalh, totalw, totmar, w, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
  pixelPerCell = (_ref = chartOpts != null ? chartOpts.pixelPerCell : void 0) != null ? _ref : null;
  chrGap = (_ref1 = chartOpts != null ? chartOpts.chrGap : void 0) != null ? _ref1 : 2;
  cellHeight = (_ref2 = chartOpts != null ? chartOpts.cellHeight : void 0) != null ? _ref2 : 30;
  cellWidth = (_ref3 = chartOpts != null ? chartOpts.cellWidth : void 0) != null ? _ref3 : 80;
  cellPad = (_ref4 = chartOpts != null ? chartOpts.cellPad : void 0) != null ? _ref4 : 20;
  fontsize = (_ref5 = chartOpts != null ? chartOpts.fontsize : void 0) != null ? _ref5 : cellHeight * 0.7;
  margin = (_ref6 = chartOpts != null ? chartOpts.margin : void 0) != null ? _ref6 : {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40
  };
  axispos = (_ref7 = chartOpts != null ? chartOpts.axispos : void 0) != null ? _ref7 : {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  rectcolor = (_ref8 = chartOpts != null ? chartOpts.rectcolor : void 0) != null ? _ref8 : "#e6e6e6";
  hilitcolor = (_ref9 = chartOpts != null ? chartOpts.hilitcolor : void 0) != null ? _ref9 : "#e6e6e6";
  nullcolor = (_ref10 = chartOpts != null ? chartOpts.nullcolor : void 0) != null ? _ref10 : "#e6e6e6";
  bordercolor = (_ref11 = chartOpts != null ? chartOpts.bordercolor : void 0) != null ? _ref11 : "black";
  colors = (_ref12 = chartOpts != null ? chartOpts.colors : void 0) != null ? _ref12 : ["slateblue", "white", "crimson"];
  lodlim = (_ref13 = chartOpts != null ? chartOpts.lodlim : void 0) != null ? _ref13 : [2, 12];
  rflim = (_ref14 = chartOpts != null ? chartOpts.rflim : void 0) != null ? _ref14 : [0.01, 0.4];
  lodonly = (_ref15 = chartOpts != null ? chartOpts.lodonly : void 0) != null ? _ref15 : false;
  rfonly = (_ref16 = chartOpts != null ? chartOpts.rfonly : void 0) != null ? _ref16 : false;
  oneAtTop = (_ref17 = chartOpts != null ? chartOpts.oneAtTop : void 0) != null ? _ref17 : false;
  chartdivid = (_ref18 = chartOpts != null ? chartOpts.chartdivid : void 0) != null ? _ref18 : 'chart';
  totmar = sumArray(rf_data.nmar);
  if (pixelPerCell == null) {
    pixelPerCell = Math.floor(700 / totmar);
  }
  w = chrGap * rf_data.chr.length + pixelPerCell * totmar;
  heatmap_width = w + margin.left + margin.right;
  heatmap_height = w + margin.top + margin.bottom;
  max_ngeno = d3.max((function() {
    var _results;
    _results = [];
    for (chrtype in geno.genocat) {
      _results.push(geno.genocat[chrtype].length);
    }
    return _results;
  })());
  crosstab_width = cellWidth * max_ngeno + margin.left + margin.right;
  crosstab_height = cellHeight * max_ngeno + margin.top + margin.bottom;
  totalw = heatmap_width + crosstab_width;
  totalh = d3.max([heatmap_height, crosstab_height]);
  svg = d3.select("div#" + chartdivid).append("svg").attr("height", totalh).attr("width", totalw);
  if (d3.min(lodlim) < 0) {
    console.log("lodlim values must be non-negative; ignored");
    lodlim = [2, 12];
  }
  if (lodlim[0] >= lodlim[1]) {
    console.log("lodlim[0] must be < lodlim[1]; ignored");
    lodlim = [2, 12];
  }
  if (d3.min(rflim) <= 0 || d3.min(rflim) > 0.5) {
    console.log("rflim values must be > 0 and <= 0.5; ignored");
    rflim = [0.001, 0.4];
  }
  if (rflim[0] >= rflim[1]) {
    console.log("rflim[0] must be < rflim[1]; ignored");
    rflim = [0.001, 0.4];
  }
  if (lodonly && rfonly) {
    console.log("lodonly and rfonly shouldn't both be true; ignored");
    lodonly = false;
    rfonly = false;
  }
  rftran = function(rf) {
    var a, b, p, r;
    p = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = rflim.length; _i < _len; _i++) {
        r = rflim[_i];
        _results.push(log2(r * (1 - r)));
      }
      return _results;
    })();
    a = (lodlim[1] - lodlim[0]) / (p[1] - p[0]);
    b = lodlim[0] + a * p[1];
    return -a * log2(rf * (1 - rf)) + b;
  };
  rf_data.z = rf_data.rf.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  if (!oneAtTop) {
    rf_data.z = transpose(rf_data.z);
  }
  if (lodonly) {
    for (row = _i = 0, _ref19 = rf_data.z.length; 0 <= _ref19 ? _i < _ref19 : _i > _ref19; row = 0 <= _ref19 ? ++_i : --_i) {
      for (col = _j = 0, _ref20 = rf_data.z.length; 0 <= _ref20 ? _j < _ref20 : _j > _ref20; col = 0 <= _ref20 ? ++_j : --_j) {
        if (col > row) {
          rf_data.z[row][col] = rf_data.z[col][row];
        }
      }
    }
  }
  if (rfonly) {
    for (row = _k = 0, _ref21 = rf_data.z.length; 0 <= _ref21 ? _k < _ref21 : _k > _ref21; row = 0 <= _ref21 ? ++_k : --_k) {
      for (col = _l = 0, _ref22 = rf_data.z.length; 0 <= _ref22 ? _l < _ref22 : _l > _ref22; col = 0 <= _ref22 ? ++_l : --_l) {
        if (row > col) {
          rf_data.z[row][col] = rf_data.z[col][row];
        }
      }
    }
  }
  for (row = _m = 0, _ref23 = rf_data.z.length; 0 <= _ref23 ? _m < _ref23 : _m > _ref23; row = 0 <= _ref23 ? ++_m : --_m) {
    for (col = _n = 0, _ref24 = rf_data.z.length; 0 <= _ref24 ? _n < _ref24 : _n > _ref24; col = 0 <= _ref24 ? ++_n : --_n) {
      if (rf_data.z[row][col] != null) {
        if (rfonly || (!lodonly && col > row)) {
          rf_data.z[row][col] = rftran(rf_data.z[row][col]);
        }
        if (rf_data.z[row][col] > lodlim[1]) {
          rf_data.z[row][col] = lodlim[1];
        }
        if (row > col && rf_data.rf[row][col] > 0.5) {
          rf_data.z[row][col] = -rf_data.z[row][col];
        }
        if (col > row && rf_data.rf[col][row] > 0.5) {
          rf_data.z[row][col] = -rf_data.z[row][col];
        }
      }
      if (row === col) {
        rf_data.z[row][col] = lodlim[1];
      }
    }
  }
  Z = rf_data.z;
  mychrheatmap = chrheatmap().pixelPerCell(pixelPerCell).chrGap(chrGap).axispos(axispos).rectcolor(rectcolor).nullcolor(nullcolor).bordercolor(bordercolor).colors(colors).zthresh(lodlim[0]).oneAtTop(oneAtTop).hover(false);
  return g_heatmap = svg.append("g").attr("id", "chrheatmap").datum(rf_data).call(mychrheatmap);
};

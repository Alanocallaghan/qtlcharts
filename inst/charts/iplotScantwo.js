// Generated by CoffeeScript 1.8.0
var iplotScantwo;

iplotScantwo = function(scantwo_data, pheno_and_geno, chartOpts) {
  var axispos, bordercolor, cells, celltip, chartdivid, chrGap, col, colors, create_crosstab, create_scan, darkrect, div, form, g_crosstab, g_heatmap, g_scans, hbot, heatmap_height, heatmap_width, hright, left, leftsel, lightrect, linecolor, linewidth, margin, mychrheatmap, nullcolor, oneAtTop, options, pixelPerCell, right, rightsel, row, submit, svg, totalh, totalw, totmar, w, wbot, wright, _i, _j, _k, _l, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
  pixelPerCell = (_ref = chartOpts != null ? chartOpts.pixelPerCell : void 0) != null ? _ref : null;
  chrGap = (_ref1 = chartOpts != null ? chartOpts.chrGap : void 0) != null ? _ref1 : 2;
  wright = (_ref2 = chartOpts != null ? chartOpts.wright : void 0) != null ? _ref2 : 500;
  hbot = (_ref3 = chartOpts != null ? chartOpts.hbot : void 0) != null ? _ref3 : 300;
  margin = (_ref4 = chartOpts != null ? chartOpts.margin : void 0) != null ? _ref4 : {
    left: 60,
    top: 30,
    right: 10,
    bottom: 40,
    inner: 5
  };
  axispos = (_ref5 = chartOpts != null ? chartOpts.axispos : void 0) != null ? _ref5 : {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  lightrect = (_ref6 = chartOpts != null ? chartOpts.lightrect : void 0) != null ? _ref6 : "#e6e6e6";
  darkrect = (_ref7 = chartOpts != null ? chartOpts.darkrect : void 0) != null ? _ref7 : "#c8c8c8";
  nullcolor = (_ref8 = chartOpts != null ? chartOpts.nullcolor : void 0) != null ? _ref8 : "#e6e6e6";
  bordercolor = (_ref9 = chartOpts != null ? chartOpts.bordercolor : void 0) != null ? _ref9 : "black";
  linecolor = (_ref10 = chartOpts != null ? chartOpts.linecolor : void 0) != null ? _ref10 : "slateblue";
  linewidth = (_ref11 = chartOpts != null ? chartOpts.linewidth : void 0) != null ? _ref11 : 2;
  colors = (_ref12 = chartOpts != null ? chartOpts.colors : void 0) != null ? _ref12 : ["white", "slateblue"];
  oneAtTop = (_ref13 = chartOpts != null ? chartOpts.oneAtTop : void 0) != null ? _ref13 : false;
  chartdivid = (_ref14 = chartOpts != null ? chartOpts.chartdivid : void 0) != null ? _ref14 : 'chart';
  totmar = sumArray(scantwo_data.nmar);
  if (pixelPerCell == null) {
    pixelPerCell = d3.max([2, Math.floor(600 / totmar)]);
  }
  w = chrGap * scantwo_data.chrnames.length + pixelPerCell * totmar;
  heatmap_width = w + margin.left + margin.right;
  heatmap_height = w + margin.top + margin.bottom;
  hright = heatmap_height / 2 - margin.top - margin.bottom;
  totalw = heatmap_width + wright + margin.left + margin.right;
  totalh = heatmap_height + (hbot + margin.top + margin.bottom) * 2;
  wbot = totalw / 3 - margin.left - margin.right;
  options = ["full", "fv1", "int", "add", "av1"];
  div = d3.select("div#" + chartdivid);
  form = div.append("g").attr("id", "form");
  left = form.append("div").text("top-left: ").style("float", "left").style("margin-left", "50px");
  leftsel = left.append("select").attr("id", "leftselect").attr("name", "left");
  leftsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === "int") {
      return "selected";
    }
    return null;
  });
  right = form.append("div").text("bottom-right: ").style("float", "left").style("margin-left", "50px");
  rightsel = right.append("select").attr("id", "rightselect").attr("name", "right");
  rightsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === "fv1") {
      return "selected";
    }
    return null;
  });
  submit = form.append("div").style("float", "left").style("margin-left", "50px").append("button").attr("name", "refresh").text("Refresh").on("click", function() {
    var leftval, rightval;
    leftsel = document.getElementById('leftselect');
    leftval = leftsel.options[leftsel.selectedIndex].value;
    rightsel = document.getElementById('rightselect');
    rightval = rightsel.options[rightsel.selectedIndex].value;
    return console.log("left: " + leftval + ", right: " + rightval);
  });
  svg = d3.select("div#" + chartdivid).append("svg").attr("height", totalh).attr("width", totalw);
  rf_data.z = rf_data.rf.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  for (row = _i = 0, _ref15 = rf_data.z.length; 0 <= _ref15 ? _i < _ref15 : _i > _ref15; row = 0 <= _ref15 ? ++_i : --_i) {
    for (col = _j = 0, _ref16 = rf_data.z.length; 0 <= _ref16 ? _j < _ref16 : _j > _ref16; col = 0 <= _ref16 ? ++_j : --_j) {
      if (row > col) {
        rf_data.z[row][col] = rf_data.z[col][row];
      }
    }
  }
  for (row = _k = 0, _ref17 = rf_data.z.length; 0 <= _ref17 ? _k < _ref17 : _k > _ref17; row = 0 <= _ref17 ? ++_k : --_k) {
    for (col = _l = 0, _ref18 = rf_data.z.length; 0 <= _ref18 ? _l < _ref18 : _l > _ref18; col = 0 <= _ref18 ? ++_l : --_l) {
      if (row === col || ((rf_data.z[row][col] != null) && rf_data.z[row][col] > lodlim[1])) {
        rf_data.z[row][col] = lodlim[1];
      }
      if (row > col && rf_data.rf[row][col] > 0.5) {
        rf_data.z[row][col] = -rf_data.z[row][col];
      }
      if (col > row && rf_data.rf[col][row] > 0.5) {
        rf_data.z[row][col] = -rf_data.z[row][col];
      }
    }
  }
  mychrheatmap = chrheatmap().pixelPerCell(pixelPerCell).chrGap(chrGap).axispos(axispos).rectcolor(lightrect).nullcolor(nullcolor).bordercolor(bordercolor).colors(colors).zthresh(lodlim[0]).oneAtTop(oneAtTop).hover(false);
  g_heatmap = svg.append("g").attr("id", "chrheatmap").datum(rf_data).call(mychrheatmap);
  g_crosstab = null;
  g_scans = [null, null];
  create_crosstab = function(marker1, marker2) {
    var data, mycrosstab;
    data = {
      x: geno.geno[marker1],
      y: geno.geno[marker2],
      xcat: geno.genocat[geno.chrtype[marker1]],
      ycat: geno.genocat[geno.chrtype[marker2]],
      xlabel: marker1,
      ylabel: marker2
    };
    if (g_crosstab != null) {
      g_crosstab.remove();
    }
    mycrosstab = crosstab().cellHeight(cellHeight).cellWidth(cellWidth).cellPad(cellPad).margin(margin).fontsize(fontsize).rectcolor(lightrect).hilitcolor(hilitcolor).bordercolor(bordercolor);
    return g_crosstab = svg.append("g").attr("id", "crosstab").attr("transform", "translate(" + crosstab_xpos + ", " + crosstab_ypos + ")").datum(data).call(mycrosstab);
  };
  create_scan = function(markerindex, panelindex) {
    var data, i, mylodchart, _m, _ref19;
    data = {
      chrnames: rf_data.chrnames,
      lodnames: ["lod"],
      chr: rf_data.chr,
      pos: rf_data.pos,
      lod: (function() {
        var _results;
        _results = [];
        for (i in rf_data.pos) {
          _results.push(i);
        }
        return _results;
      })(),
      markernames: rf_data.labels
    };
    for (row = _m = 0, _ref19 = rf_data.rf.length; 0 <= _ref19 ? _m < _ref19 : _m > _ref19; row = 0 <= _ref19 ? ++_m : --_m) {
      if (row > markerindex) {
        data.lod[row] = rf_data.rf[markerindex][row];
      } else if (row < markerindex) {
        data.lod[row] = rf_data.rf[row][markerindex];
      }
    }
    data.lod[markerindex] = null;
    if (g_scans[panelindex] != null) {
      g_scans[panelindex].remove();
    }
    mylodchart = lodchart().height(hbot - margin.top - margin.bottom).width(wbot - margin.left - margin.right).margin(margin).axispos(axispos).ylim([0.0, d3.max(data.lod)]).lightrect(lightrect).darkrect(darkrect).linewidth(0).linecolor("").pointsize(pointsize).pointcolor(pointcolor).pointstroke(pointstroke).lodvarname("lod").title(data.markernames[markerindex]);
    g_scans[panelindex] = svg.append("g").attr("id", "lod_rf_" + (panelindex + 1)).attr("transform", "translate(" + (wbot * panelindex) + ", " + htop + ")").datum(data).call(mylodchart);
    return mylodchart.markerSelect().on("click", function(d) {
      var newmarker;
      newmarker = d.name;
      if (panelindex === 0) {
        create_crosstab(rf_data.labels[markerindex], newmarker);
      } else {
        create_crosstab(newmarker, rf_data.labels[markerindex]);
      }
      return create_scan(rf_data.labels.indexOf(newmarker), 1 - panelindex);
    });
  };
  celltip = d3.tip().attr('class', 'd3-tip').html(function(d) {
    var lod, mari, marj, rf;
    mari = rf_data.labels[d.i];
    marj = rf_data.labels[d.j];
    if (+d.i > +d.j) {
      rf = rf_data.rf[d.i][d.j];
      lod = rf_data.rf[d.j][d.i];
    } else if (+d.j > +d.i) {
      rf = rf_data.rf[d.j][d.i];
      lod = rf_data.rf[d.i][d.j];
    } else {
      return mari;
    }
    rf = rf >= 0.1 ? d3.format(".2f")(rf) : d3.format(".3f")(rf);
    if (d.i === d.j) {
      return mari;
    }
    return "(" + mari + " " + marj + "), LOD = " + (d3.format(".1f")(lod)) + ", rf = " + rf;
  }).direction('e').offset([0, 10]);
  svg.call(celltip);
  cells = mychrheatmap.cellSelect();
  return cells.on("mouseover", function(d) {
    return celltip.show(d);
  }).on("mouseout", function() {
    return celltip.hide();
  }).on("click", function(d) {
    create_crosstab(rf_data.labels[d.j], rf_data.labels[d.i]);
    create_scan(d.i, 0);
    if (d.i !== d.j) {
      return create_scan(d.j, 1);
    } else {
      g_scans[1].remove();
      return g_scans[1] = null;
    }
  });
};

// Generated by CoffeeScript 1.8.0
var add_symmetric_lod, iplotScantwo, lod_for_heatmap;

iplotScantwo = function(scantwo_data, pheno_and_geno, chartOpts) {
  var axispos, bordercolor, cells, celltip, chartdivid, chrGap, color, darkrect, div, form, g_heatmap, hbot, heatmap_height, heatmap_width, hright, left, leftsel, leftvalue, lightrect, linecolor, linewidth, margin, mychrheatmap, nullcolor, oneAtTop, options, pixelPerCell, right, rightsel, rightvalue, submit, svg, totalh, totalw, totmar, w, wbot, wright, zthresh, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
  pixelPerCell = (_ref = chartOpts != null ? chartOpts.pixelPerCell : void 0) != null ? _ref : null;
  chrGap = (_ref1 = chartOpts != null ? chartOpts.chrGap : void 0) != null ? _ref1 : 2;
  wright = (_ref2 = chartOpts != null ? chartOpts.wright : void 0) != null ? _ref2 : 500;
  hbot = (_ref3 = chartOpts != null ? chartOpts.hbot : void 0) != null ? _ref3 : 300;
  margin = (_ref4 = chartOpts != null ? chartOpts.margin : void 0) != null ? _ref4 : {
    left: 60,
    top: 30,
    right: 10,
    bottom: 40,
    inner: 5
  };
  axispos = (_ref5 = chartOpts != null ? chartOpts.axispos : void 0) != null ? _ref5 : {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  lightrect = (_ref6 = chartOpts != null ? chartOpts.lightrect : void 0) != null ? _ref6 : "#e6e6e6";
  darkrect = (_ref7 = chartOpts != null ? chartOpts.darkrect : void 0) != null ? _ref7 : "#c8c8c8";
  nullcolor = (_ref8 = chartOpts != null ? chartOpts.nullcolor : void 0) != null ? _ref8 : "#e6e6e6";
  bordercolor = (_ref9 = chartOpts != null ? chartOpts.bordercolor : void 0) != null ? _ref9 : "black";
  linecolor = (_ref10 = chartOpts != null ? chartOpts.linecolor : void 0) != null ? _ref10 : "slateblue";
  linewidth = (_ref11 = chartOpts != null ? chartOpts.linewidth : void 0) != null ? _ref11 : 2;
  color = (_ref12 = chartOpts != null ? chartOpts.color : void 0) != null ? _ref12 : "slateblue";
  oneAtTop = (_ref13 = chartOpts != null ? chartOpts.oneAtTop : void 0) != null ? _ref13 : false;
  zthresh = (_ref14 = chartOpts != null ? chartOpts.zthresh : void 0) != null ? _ref14 : 0;
  chartdivid = (_ref15 = chartOpts != null ? chartOpts.chartdivid : void 0) != null ? _ref15 : 'chart';
  totmar = sumArray(scantwo_data.nmar);
  if (pixelPerCell == null) {
    pixelPerCell = d3.max([2, Math.floor(600 / totmar)]);
  }
  w = chrGap * scantwo_data.chrnames.length + pixelPerCell * totmar;
  heatmap_width = w + margin.left + margin.right;
  heatmap_height = w + margin.top + margin.bottom;
  hright = heatmap_height / 2 - margin.top - margin.bottom;
  totalw = heatmap_width + wright + margin.left + margin.right;
  totalh = heatmap_height + (hbot + margin.top + margin.bottom) * 2;
  wbot = totalw / 3 - margin.left - margin.right;
  leftvalue = "int";
  rightvalue = "fv1";
  options = ["full", "fv1", "int", "add", "av1"];
  div = d3.select("div#" + chartdivid);
  form = div.append("g").attr("id", "form");
  left = form.append("div").text(oneAtTop ? "bottom-left: " : "top-left: ").style("float", "left").style("margin-left", "50px");
  leftsel = left.append("select").attr("id", "leftselect").attr("name", "left");
  leftsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === leftvalue) {
      return "selected";
    }
    return null;
  });
  right = form.append("div").text(oneAtTop ? "top-right: " : "bottom-right: ").style("float", "left").style("margin-left", "50px");
  rightsel = right.append("select").attr("id", "rightselect").attr("name", "right");
  rightsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === rightvalue) {
      return "selected";
    }
    return null;
  });
  submit = form.append("div").style("float", "left").style("margin-left", "50px").append("button").attr("name", "refresh").text("Refresh").on("click", function() {
    leftsel = document.getElementById('leftselect');
    leftvalue = leftsel.options[leftsel.selectedIndex].value;
    rightsel = document.getElementById('rightselect');
    rightvalue = rightsel.options[rightsel.selectedIndex].value;
    return console.log("left: " + leftval + ", right: " + rightval);
  });
  svg = d3.select("div#" + chartdivid).append("svg").attr("height", totalh).attr("width", totalw);
  console.log("add symmetric lod");
  scantwo_data = add_symmetric_lod(scantwo_data);
  console.log("lod for heatmap");
  scantwo_data.z = lod_for_heatmap(scantwo_data, "int", "fv1");
  mychrheatmap = chrheatmap().pixelPerCell(pixelPerCell).chrGap(chrGap).axispos(axispos).rectcolor("white").nullcolor(nullcolor).bordercolor(bordercolor).colors(["white", color]).zlim([0, scantwo_data.max.full]).zthresh(zthresh).oneAtTop(oneAtTop).hover(false);
  console.log("create heatmap");
  g_heatmap = svg.append("g").attr("id", "chrheatmap").datum(scantwo_data).call(mychrheatmap);
  celltip = d3.tip().attr('class', 'd3-tip').html(function(d) {
    var leftlod, mari, marj, rightlod;
    mari = scantwo_data.labels[d.i];
    marj = scantwo_data.labels[d.j];
    if (+d.i > +d.j) {
      leftlod = scantwo_data[leftvalue][d.i][d.j];
      rightlod = scantwo_data[rightvalue][d.j][d.i];
    } else if (+d.j > +d.i) {
      leftlod = scantwo_data[leftvalue][d.j][d.i];
      rightlod = scantwo_data[rightvalue][d.i][d.j];
    } else {
      return mari;
    }
    if (d.i === d.j) {
      return mari;
    }
    return "(" + marj + " " + mari + ") " + leftvalue + " = " + (d3.format(".1f")(leftlod)) + ", " + rightvalue + " = " + (d3.format(".1f")(rightlod));
  }).direction('e').offset([0, 10]);
  svg.call(celltip);
  cells = mychrheatmap.cellSelect();
  return cells.on("mouseover", function(d) {
    return celltip.show(d);
  }).on("mouseout", function() {
    return celltip.hide();
  }).on("click", function(d) {
    create_crosstab(scantwo_data.labels[d.j], scantwo_data.labels[d.i]);
    create_scan(d.i, 0);
    if (d.i !== d.j) {
      return create_scan(d.j, 1);
    } else {
      g_scans[1].remove();
      return g_scans[1] = null;
    }
  });
};

add_symmetric_lod = function(scantwo_data) {
  var i, j, _i, _j, _k, _l, _len, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
  scantwo_data.full = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.add = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.fv1 = scantwo_data.lodv1.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.av1 = scantwo_data.lodv1.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.int = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  for (i = _i = 0, _ref = scantwo_data.lod.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    for (j = _j = _ref1 = i + 1, _ref2 = scantwo_data.lod[i].length; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; j = _ref1 <= _ref2 ? ++_j : --_j) {
      scantwo_data.full[i][j] = scantwo_data.lod[j][i];
      scantwo_data.add[j][i] = scantwo_data.lod[i][j];
      scantwo_data.fv1[i][j] = scantwo_data.lodv1[j][i];
      scantwo_data.av1[j][i] = scantwo_data.lodv1[i][j];
    }
  }
  scantwo_data.one = [];
  for (i = _k = 0, _ref3 = scantwo_data.lod.length; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; i = 0 <= _ref3 ? ++_k : --_k) {
    scantwo_data.full[i][i] = 0;
    scantwo_data.add[i][i] = 0;
    scantwo_data.fv1[i][i] = 0;
    scantwo_data.av1[i][i] = 0;
    scantwo_data.one.push(scantwo_data.lod[i]);
    for (j = _l = 0, _ref4 = scantwo_data.lod.length; 0 <= _ref4 ? _l < _ref4 : _l > _ref4; j = 0 <= _ref4 ? ++_l : --_l) {
      scantwo_data.int[i][j] = scantwo_data.full[i][j] - scantwo_data.add[i][j];
    }
  }
  scantwo_data.lod = null;
  scantwo_data.lodv1 = null;
  scantwo_data.max = {};
  _ref5 = ["full", "add", "fv1", "av1", "int"];
  for (_m = 0, _len = _ref5.length; _m < _len; _m++) {
    i = _ref5[_m];
    scantwo_data.max[i] = matrixMax(scantwo_data[i]);
  }
  return scantwo_data;
};

lod_for_heatmap = function(scantwo_data, left, right) {
  var i, j, thelod, z, _i, _j, _ref, _ref1;
  z = scantwo_data.full.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  for (i = _i = 0, _ref = z.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    for (j = _j = 0, _ref1 = z.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
      thelod = j < i ? right : left;
      z[i][j] = scantwo_data[thelod][i][j] / scantwo_data.max[thelod] * scantwo_data.max["full"];
    }
  }
  return z;
};

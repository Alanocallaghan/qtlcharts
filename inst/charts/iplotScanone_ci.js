// Generated by CoffeeScript 1.6.3
var iplotScanone_ci;

iplotScanone_ci = function(lod_data, pxg_data, chartOpts) {
  var g_lod, height, margin, markers, mylodchart, plotCI, svg, totalh, totalw, wleft, wright, x, ylim, _ref, _ref1, _ref2, _ref3;
  markers = (function() {
    var _results;
    _results = [];
    for (x in pxg_data.chrByMarkers) {
      _results.push(x);
    }
    return _results;
  })();
  height = (_ref = chartOpts != null ? chartOpts.height : void 0) != null ? _ref : 450;
  wleft = (_ref1 = chartOpts != null ? chartOpts.wleft : void 0) != null ? _ref1 : 700;
  wright = (_ref2 = chartOpts != null ? chartOpts.wright : void 0) != null ? _ref2 : 300;
  margin = (_ref3 = chartOpts != null ? chartOpts.margin : void 0) != null ? _ref3 : {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  totalh = height + margin.top + margin.bottom;
  totalw = wleft + wright + (margin.left + margin.right) * 2;
  mylodchart = lodchart().lodvarname("lod").height(height).width(wleft).margin(margin);
  svg = d3.select("div#chart").append("svg").attr("height", totalh).attr("width", totalw);
  g_lod = svg.append("g").attr("id", "lodchart").datum(lod_data).call(mylodchart);
  ylim = null;
  plotCI = function(markername, markerindex) {
    var ave, chr, chrtype, g, gabs, genonames, high, i, j, low, means, mycichart, p, phesub, range, se, variance, _i, _ref4;
    svg.select("g#cichart").remove();
    g = pxg_data.geno[markerindex];
    gabs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        x = g[_i];
        _results.push(Math.abs(x));
      }
      return _results;
    })();
    chr = pxg_data.chrByMarkers[markername];
    chrtype = pxg_data.chrtype[chr];
    genonames = pxg_data.genonames[chrtype];
    means = [];
    se = [];
    for (j = _i = 1, _ref4 = genonames.length; 1 <= _ref4 ? _i <= _ref4 : _i >= _ref4; j = 1 <= _ref4 ? ++_i : --_i) {
      phesub = (function() {
        var _j, _len, _ref5, _results;
        _ref5 = pxg_data.pheno;
        _results = [];
        for (i = _j = 0, _len = _ref5.length; _j < _len; i = ++_j) {
          p = _ref5[i];
          if (gabs[i] === j) {
            _results.push(p);
          }
        }
        return _results;
      })();
      if (phesub.length > 0) {
        ave = (phesub.reduce(function(a, b) {
          return a + b;
        })) / phesub.length;
        means.push(ave);
      } else {
        means.push(null);
      }
      if (phesub.length > 1) {
        variance = (phesub.reduce(function(a, b) {
          return a + Math.pow(b - ave, 2);
        })) / (phesub.length - 1);
        se.push(Math.sqrt(variance / phesub.length));
      } else {
        se.push(null);
      }
    }
    low = (function() {
      var _results;
      _results = [];
      for (i in means) {
        _results.push(means[i] - 2 * se[i]);
      }
      return _results;
    })();
    high = (function() {
      var _results;
      _results = [];
      for (i in means) {
        _results.push(means[i] + 2 * se[i]);
      }
      return _results;
    })();
    range = [d3.min(low), d3.max(high)];
    if (ylim === null) {
      ylim = range;
    } else {
      ylim = [d3.min([range[0], ylim[0]]), d3.max([range[1], ylim[1]])];
    }
    mycichart = cichart().height(height).width(wright).margin(margin).title(markername).xlab("Genotype").ylab("Phenotype").ylim(ylim);
    return svg.append("g").attr("id", "cichart").attr("transform", "translate(" + (wleft + margin.left + margin.right) + ",0)").datum({
      'means': means,
      'low': low,
      'high': high,
      'categories': genonames
    }).call(mycichart);
  };
  return mylodchart.markerSelect().on("click", function(d, i) {
    return plotCI(markers[i], i);
  });
};

// Generated by CoffeeScript 1.7.1
var chrscales, expand2vector, formatAxis, getLeftRight, median, pullVarAsArray, reorgLodData, selectGroupColors, unique;

formatAxis = function(d) {
  var ndig;
  d = d[1] - d[0];
  ndig = Math.floor(Math.log(d % 10) / Math.log(10));
  if (ndig > 0) {
    ndig = 0;
  }
  ndig = Math.abs(ndig);
  return d3.format("." + ndig + "f");
};

unique = function(x) {
  var output, v, _i, _len, _results;
  output = {};
  for (_i = 0, _len = x.length; _i < _len; _i++) {
    v = x[_i];
    if (v) {
      output[v] = v;
    }
  }
  _results = [];
  for (v in output) {
    _results.push(output[v]);
  }
  return _results;
};

pullVarAsArray = function(data, variable) {
  var i, v;
  v = [];
  for (i in data) {
    v = v.concat(data[i][variable]);
  }
  return v;
};

chrscales = function(data, width, chrGap) {
  var L, chr, chrEnd, chrLength, chrStart, cur, i, rng, totalChrLength, w, _i, _j, _len, _len1, _ref, _ref1;
  chrStart = [];
  chrEnd = [];
  chrLength = [];
  totalChrLength = 0;
  _ref = data.chrnames;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    chr = _ref[_i];
    rng = d3.extent(data.posByChr[chr]);
    chrStart.push(rng[0]);
    chrEnd.push(rng[1]);
    L = rng[1] - rng[0];
    chrLength.push(L);
    totalChrLength += L;
  }
  data.chrStart = [];
  data.chrEnd = [];
  cur = Math.round(chrGap / 2);
  data.xscale = {};
  _ref1 = data.chrnames;
  for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
    chr = _ref1[i];
    data.chrStart.push(cur);
    w = Math.round((width - chrGap * data.chrnames.length) / totalChrLength * chrLength[i]);
    data.chrEnd.push(cur + w);
    cur = data.chrEnd[i] + chrGap;
    data.xscale[chr] = d3.scale.linear().domain([chrStart[i], chrEnd[i]]).range([data.chrStart[i], data.chrEnd[i]]);
  }
  return data;
};

reorgLodData = function(data, lodvarname) {
  var chr, i, j, marker, pos, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  data.posByChr = {};
  data.lodByChr = {};
  _ref = data.chrnames;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    chr = _ref[i];
    data.posByChr[chr] = [];
    data.lodByChr[chr] = [];
    _ref1 = data.pos;
    for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
      pos = _ref1[j];
      if (data.chr[j] === chr) {
        data.posByChr[chr].push(pos);
      }
      if (data.chr[j] === chr) {
        data.lodByChr[chr].push(data[lodvarname][j]);
      }
    }
  }
  data.markers = [];
  _ref2 = data.markernames;
  for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
    marker = _ref2[i];
    if (marker !== "") {
      data.markers.push({
        name: marker,
        chr: data.chr[i],
        pos: data.pos[i],
        lod: data[lodvarname][i]
      });
    }
  }
  return data;
};

selectGroupColors = function(ngroup, palette) {
  if (ngroup === 0) {
    return [];
  }
  if (palette === "dark") {
    if (ngroup === 1) {
      return "slateblue";
    }
    if (ngroup === 2) {
      return ["MediumVioletRed", "slateblue"];
    }
    if (ngroup <= 9) {
      return colorbrewer.Set1[ngroup];
    }
    return d3.scale.category20().range().slice(0, ngroup);
  } else {
    if (ngroup === 1) {
      return d3.rgb(190, 190, 190);
    }
    if (ngroup === 2) {
      return ["lightpink", "lightblue"];
    }
    if (ngroup <= 9) {
      return colorbrewer.Pastel1[ngroup];
    }
    return ["#8fc7f4", "#fed7f8", "#ffbf8e", "#fffbb8", "#8ce08c", "#d8ffca", "#f68788", "#ffd8d6", "#d4a7fd", "#f5f0f5", "#cc968b", "#f4dcd4", "#f3b7f2", "#f7f6f2", "#bfbfbf", "#f7f7f7", "#fcfd82", "#fbfbcd", "#87feff", "#defaf5"].slice(0, ngroup);
  }
};

expand2vector = function(input, n) {
  var i;
  if (Array.isArray(input) && input.length >= n) {
    return input;
  }
  if (!Array.isArray(input)) {
    input = [input];
  }
  if (input.length === 1 && n > 1) {
    input = (function() {
      var _results;
      _results = [];
      for (i in d3.range(n)) {
        _results.push(input[0]);
      }
      return _results;
    })();
  }
  return input;
};

median = function(x) {
  var n;
  if (x == null) {
    return null;
  }
  n = x.length;
  x.sort(function(a, b) {
    return a - b;
  });
  if (n % 2 === 1) {
    return x[(n - 1) / 2];
  }
  return (x[n / 2] + x[(n / 2) - 1]) / 2;
};

getLeftRight = function(x) {
  var i, n, result, v, xdif, _i, _j, _k, _len, _ref;
  n = x.length;
  x.sort(function(a, b) {
    return a - b;
  });
  xdif = [];
  result = {};
  for (_i = 0, _len = x.length; _i < _len; _i++) {
    v = x[_i];
    result[v] = {};
  }
  for (i = _j = 1; 1 <= n ? _j < n : _j > n; i = 1 <= n ? ++_j : --_j) {
    xdif.push(x[i] - x[i - 1]);
    result[x[i]].left = x[i - 1];
  }
  for (i = _k = 0, _ref = n - 1; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
    result[x[i]].right = x[i + 1];
  }
  xdif = median(xdif);
  result.mediandiff = xdif;
  result[x[0]].left = x[0] - xdif;
  result[x[n - 1]].right = x[n - 1] + xdif;
  result.extent = [x[0] - xdif / 2, x[n - 1] + xdif / 2];
  return result;
};

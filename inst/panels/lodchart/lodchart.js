// Generated by CoffeeScript 1.6.3
var chrscales, formatAxis, lodchart, reorgData;

lodchart = function() {
  var axispos, chart, chrGap, chrSelect, darkrect, height, lightrect, linecolor, linewidth, lodcurve, lodvarname, margin, markerSelect, nyticks, pointcolor, pointsize, title, titlepos, width, xlab, xscale, ylab, ylim, yscale, yticks;
  width = 800;
  height = 500;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  axispos = {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  titlepos = 20;
  ylim = null;
  nyticks = 5;
  yticks = null;
  chrGap = 8;
  darkrect = d3.rgb(200, 200, 200);
  lightrect = d3.rgb(230, 230, 230);
  linecolor = "darkslateblue";
  linewidth = 2;
  pointcolor = "#E9CFEC";
  pointsize = 0;
  title = "";
  xlab = "Chromosome";
  ylab = "LOD score";
  yscale = d3.scale.linear();
  xscale = null;
  lodcurve = null;
  lodvarname = "lod";
  markerSelect = null;
  chrSelect = null;
  chart = function(selection) {
    return selection.each(function(data) {
      var chr, curves, g, gEnter, hiddenpoints, markerpoints, markertip, svg, titlegrp, xaxis, yaxis, _i, _len, _ref;
      ylim = ylim != null ? ylim : [0, d3.max(data[lodvarname])];
      svg = d3.select(this).selectAll("svg").data([data]);
      gEnter = svg.enter().append("svg").append("g");
      svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      g = svg.select("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      g.append("rect").attr("x", 0).attr("y", 0).attr("height", height).attr("width", width).attr("fill", darkrect).attr("stroke", "none");
      yscale.domain(ylim).range([height, margin.inner]);
      yticks = yticks != null ? yticks : yscale.ticks(nyticks);
      data = reorgData(data, lodvarname);
      data = chrscales(data, width, chrGap);
      xscale = data.xscale;
      chrSelect = g.append("g").attr("class", "chrRect").selectAll("empty").data(data.chrnames).enter().append("rect").attr("id", function(d) {
        return "chrrect" + d;
      }).attr("x", function(d, i) {
        return data.chrStart[i] - chrGap / 2;
      }).attr("width", function(d, i) {
        return data.chrEnd[i] - data.chrStart[i] + chrGap;
      }).attr("y", 0).attr("height", height).attr("fill", function(d, i) {
        if (i % 2) {
          return darkrect;
        }
        return lightrect;
      }).attr("stroke", "none");
      xaxis = g.append("g").attr("class", "x axis");
      xaxis.selectAll("empty").data(data.chrnames).enter().append("text").text(function(d) {
        return d;
      }).attr("x", function(d, i) {
        return (data.chrStart[i] + data.chrEnd[i]) / 2;
      }).attr("y", height + axispos.xlabel);
      xaxis.append("text").attr("class", "title").attr("y", height + axispos.xtitle).attr("x", width / 2).text(xlab);
      yaxis = g.append("g").attr("class", "y axis");
      yaxis.selectAll("empty").data(yticks).enter().append("line").attr("y1", function(d) {
        return yscale(d);
      }).attr("y2", function(d) {
        return yscale(d);
      }).attr("x1", 0).attr("x2", width).attr("fill", "none").attr("stroke", "white").attr("stroke-width", 1).style("pointer-events", "none");
      yaxis.selectAll("empty").data(yticks).enter().append("text").attr("y", function(d) {
        return yscale(d);
      }).attr("x", -axispos.ylabel).text(function(d) {
        return formatAxis(yticks)(d);
      });
      yaxis.append("text").attr("class", "title").attr("y", height / 2).attr("x", -axispos.ytitle).text(ylab).attr("transform", "rotate(270," + (-axispos.ytitle) + "," + (height / 2) + ")");
      lodcurve = function(chr) {
        return d3.svg.line().x(function(d) {
          return xscale[chr](d);
        }).y(function(d, i) {
          return yscale(data.lodByChr[chr][i]);
        });
      };
      curves = g.append("g").attr("id", "curves");
      _ref = data.chrnames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chr = _ref[_i];
        curves.append("path").datum(data.posByChr[chr]).attr("d", lodcurve(chr)).attr("stroke", linecolor).attr("fill", "none").attr("stroke-width", linewidth).style("pointer-events", "none");
      }
      if (pointsize > 0) {
        markerpoints = g.append("g").attr("id", "markerpoints_visible");
        markerpoints.selectAll("empty").data(data.markers).enter().append("circle").attr("cx", function(d) {
          return xscale[d.chr](d.pos);
        }).attr("cy", function(d) {
          return yscale(d.lod);
        }).attr("r", pointsize).attr("fill", pointcolor).attr("pointer-events", "hidden");
      }
      hiddenpoints = g.append("g").attr("id", "markerpoints_hidden");
      markertip = d3.tip().attr('class', 'd3-tip').html(function(d) {
        return [d.name, " LOD = " + (d3.format('.2f')(d.lod))];
      }).direction("e").offset([0, 10]);
      svg.call(markertip);
      markerSelect = hiddenpoints.selectAll("empty").data(data.markers).enter().append("circle").attr("cx", function(d) {
        return xscale[d.chr](d.pos);
      }).attr("cy", function(d) {
        return yscale(d.lod);
      }).attr("id", function(d) {
        return d.name;
      }).attr("r", d3.max([pointsize * 2, 3])).attr("opacity", 0).attr("fill", pointcolor).attr("stroke", "black").attr("stroke-width", "1").on("mouseover", function(d) {
        d3.select(this).attr("opacity", 1);
        return markertip.show(d);
      }).on("mouseout", function() {
        return d3.select(this).attr("opacity", 0).call(markertip.hide);
      });
      titlegrp = g.append("g").attr("class", "title").append("text").attr("x", width / 2).attr("y", -titlepos).text(title);
      return g.append("rect").attr("x", 0).attr("y", 0).attr("height", height).attr("width", width).attr("fill", "none").attr("stroke", "black").attr("stroke-width", "none");
    });
  };
  chart.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return chart;
  };
  chart.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return chart;
  };
  chart.margin = function(value) {
    if (!arguments.length) {
      return margin;
    }
    margin = value;
    return chart;
  };
  chart.titlepos = function(value) {
    if (!arguments.length) {
      return titlepos;
    }
    titlepos;
    return chart;
  };
  chart.axispos = function(value) {
    if (!arguments.length) {
      return axispos;
    }
    axispos = value;
    return chart;
  };
  chart.ylim = function(value) {
    if (!arguments.length) {
      return ylim;
    }
    ylim = value;
    return chart;
  };
  chart.nyticks = function(value) {
    if (!arguments.length) {
      return nyticks;
    }
    nyticks = value;
    return chart;
  };
  chart.yticks = function(value) {
    if (!arguments.length) {
      return yticks;
    }
    yticks = value;
    return chart;
  };
  chart.chrGap = function(value) {
    if (!arguments.length) {
      return chrGap;
    }
    chrGap = value;
    return chart;
  };
  chart.darkrect = function(value) {
    if (!arguments.length) {
      return darkrect;
    }
    darkrect = value;
    return chart;
  };
  chart.lightrect = function(value) {
    if (!arguments.length) {
      return lightrect;
    }
    lightrect = value;
    return chart;
  };
  chart.linecolor = function(value) {
    if (!arguments.length) {
      return linecolor;
    }
    linecolor = value;
    return chart;
  };
  chart.linewidth = function(value) {
    if (!arguments.length) {
      return linewidth;
    }
    linewidth = value;
    return chart;
  };
  chart.pointcolor = function(value) {
    if (!arguments.length) {
      return pointcolor;
    }
    pointcolor = value;
    return chart;
  };
  chart.pointsize = function(value) {
    if (!arguments.length) {
      return pointsize;
    }
    pointsize = value;
    return chart;
  };
  chart.title = function(value) {
    if (!arguments.length) {
      return title;
    }
    title = value;
    return chart;
  };
  chart.xlab = function(value) {
    if (!arguments.length) {
      return xlab;
    }
    xlab = value;
    return chart;
  };
  chart.ylab = function(value) {
    if (!arguments.length) {
      return ylab;
    }
    ylab = value;
    return chart;
  };
  chart.lodvarname = function(value) {
    if (!arguments.length) {
      return lodvarname;
    }
    lodvarname = value;
    return chart;
  };
  chart.yscale = function() {
    return yscale;
  };
  chart.xscale = function() {
    return xscale;
  };
  chart.lodcurve = function() {
    return lodcurve;
  };
  chart.markerSelect = function() {
    return markerSelect;
  };
  chart.chrSelect = function() {
    return chrSelect;
  };
  return chart;
};

formatAxis = function(d) {
  var ndig;
  d = d[1] - d[0];
  ndig = Math.floor(Math.log(d % 10) / Math.log(10));
  if (ndig > 0) {
    ndig = 0;
  }
  ndig = Math.abs(ndig);
  return d3.format("." + ndig + "f");
};

reorgData = function(data, lodvarname) {
  var chr, i, j, marker, pos, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  data.posByChr = {};
  data.lodByChr = {};
  _ref = data.chrnames;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    chr = _ref[i];
    data.posByChr[chr] = [];
    data.lodByChr[chr] = [];
    _ref1 = data.pos;
    for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
      pos = _ref1[j];
      if (data.chr[j] === chr) {
        data.posByChr[chr].push(pos);
      }
      if (data.chr[j] === chr) {
        data.lodByChr[chr].push(data[lodvarname][j]);
      }
    }
  }
  data.markers = [];
  _ref2 = data.markernames;
  for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
    marker = _ref2[i];
    if (marker !== "") {
      data.markers.push({
        name: marker,
        chr: data.chr[i],
        pos: data.pos[i],
        lod: data[lodvarname][i]
      });
    }
  }
  return data;
};

chrscales = function(data, width, chrGap) {
  var L, chr, chrEnd, chrLength, chrStart, cur, i, rng, totalChrLength, w, _i, _j, _len, _len1, _ref, _ref1;
  chrStart = [];
  chrEnd = [];
  chrLength = [];
  totalChrLength = 0;
  _ref = data.chrnames;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    chr = _ref[_i];
    rng = d3.extent(data.posByChr[chr]);
    chrStart.push(rng[0]);
    chrEnd.push(rng[1]);
    L = rng[1] - rng[0];
    chrLength.push(L);
    totalChrLength += L;
  }
  data.chrStart = [];
  data.chrEnd = [];
  cur = Math.round(chrGap / 2);
  data.xscale = {};
  _ref1 = data.chrnames;
  for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
    chr = _ref1[i];
    data.chrStart.push(cur);
    w = Math.round((width - chrGap * data.chrnames.length) / totalChrLength * chrLength[i]);
    data.chrEnd.push(cur + w);
    cur = data.chrEnd[i] + chrGap;
    data.xscale[chr] = d3.scale.linear().domain([chrStart[i], chrEnd[i]]).range([data.chrStart[i], data.chrEnd[i]]);
  }
  return data;
};

/*
//@ sourceMappingURL=lodchart.map
*/

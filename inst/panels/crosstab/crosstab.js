// Generated by CoffeeScript 1.7.1
var crosstab;

crosstab = function() {
  var axispos, cellHeight, cellPad, cellWidth, chart, margin, title, titlepos, xlab, ylab;
  cellHeight = 30;
  cellWidth = 80;
  cellPad = 20;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40
  };
  axispos = {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  titlepos = 20;
  title = "";
  xlab = "";
  ylab = "";
  chart = function(selection) {
    return selection.each(function(data) {
      var cells, g, gEnter, height, i, j, n, ncol, nrow, svg, tab, width, _i, _j;
      n = data.x.length;
      if (data.y.length !== n) {
        console.log("data.x.length != data.y.length");
      }
      ncol = data.xcat.length;
      if (d3.max(data.x) >= ncol || d3.min(data.x) < 0) {
        console.log("data.x should be in range 0-" + (ncol - 1));
      }
      nrow = data.ycat.length;
      if (d3.max(data.y) >= nrow || d3.min(data.y) < 0) {
        console.log("data.y should be in range 0-" + (nrow - 1));
      }
      tab = calc_crosstab(data);
      cells = [];
      for (i = _i = 0; 0 <= nrow ? _i <= nrow : _i >= nrow; i = 0 <= nrow ? ++_i : --_i) {
        for (j = _j = 0; 0 <= ncol ? _j <= ncol : _j >= ncol; j = 0 <= ncol ? ++_j : --_j) {
          cells.push({
            value: tab[i][j],
            row: i,
            col: j
          });
        }
      }
      width = margin.left + margin.right + (ncol + 1) * cellWidth;
      height = margin.top + margin.bottom + (nrow + 1) * cellHeight;
      svg = d3.select(this).selectAll("svg").data([data]);
      gEnter = svg.enter().append("svg").append("g");
      svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      g = svg.select("g");
      g.append("rect").attr("x", margin.left).attr("y", margin.top).attr("height", height - margin.bottom - margin.top).attr("width", width - margin.left - margin.right).attr("fill", "#e6e6e6").attr("stroke", null).attr("stroke-width", "0");
      g.append("g").attr("id", "value_rect").selectAll("empty").data(cells).enter().append("rect").attr("x", function(d) {
        return d.col * cellWidth + margin.left;
      }).attr("y", function(d) {
        return d.row * cellHeight + margin.top;
      }).attr("width", cellWidth).attr("height", cellHeight).attr("fill", "none").attr("stroke", "blue");
      return g.append("g").attr("id", "values").selectAll("empty").data(cells).enter().append("text").attr("x", function(d) {
        return (d.col + 1) * cellWidth - cellPad + margin.left;
      }).attr("y", function(d) {
        return (d.row + 1) * cellHeight - cellHeight / 2 + margin.top;
      }).text(function(d) {
        return d.value;
      }).attr("class", "crosstab").attr("font-size", d3.min([cellHeight, cellWidth - cellPad * 2]) * 0.8);
    });
  };
  chart.cellHeight = function(value) {
    if (!arguments.length) {
      return cellHeight;
    }
    cellHeight = value;
    return chart;
  };
  chart.cellWidth = function(value) {
    if (!arguments.length) {
      return cellWidth;
    }
    cellWidth = value;
    return chart;
  };
  chart.margin = function(value) {
    if (!arguments.length) {
      return margin;
    }
    margin = value;
    return chart;
  };
  chart.axispos = function(value) {
    if (!arguments.length) {
      return axispos;
    }
    axispos = value;
    return chart;
  };
  chart.titlepos = function(value) {
    if (!arguments.length) {
      return titlepos;
    }
    titlepos;
    return chart;
  };
  chart.title = function(value) {
    if (!arguments.length) {
      return title;
    }
    title = value;
    return chart;
  };
  chart.xlab = function(value) {
    if (!arguments.length) {
      return xlab;
    }
    xlab = value;
    return chart;
  };
  chart.ylab = function(value) {
    if (!arguments.length) {
      return ylab;
    }
    ylab = value;
    return chart;
  };
  return chart;
};

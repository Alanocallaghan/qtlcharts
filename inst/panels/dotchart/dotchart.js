// Generated by CoffeeScript 1.6.3
var dotchart, formatAxis, unique,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

dotchart = function() {
  var axispos, chart, dataByInd, height, margin, nyticks, pointcolor, pointsSelect, pointsize, pointstroke, rectcolor, title, titlepos, width, xcategories, xcatlabels, xjitter, xlab, xscale, xvar, yNA, ylab, ylim, yscale, yticks, yvar;
  width = 400;
  height = 500;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  axispos = {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  titlepos = 20;
  xcategories = null;
  xcatlabels = null;
  xjitter = null;
  yNA = {
    handle: true,
    force: false,
    width: 15,
    gap: 10
  };
  ylim = null;
  nyticks = 5;
  yticks = null;
  rectcolor = d3.rgb(230, 230, 230);
  pointcolor = "slateblue";
  pointstroke = "black";
  pointsize = 3;
  title = "";
  xlab = "Group";
  ylab = "Response";
  xscale = d3.scale.ordinal();
  yscale = d3.scale.linear();
  xvar = 0;
  yvar = 1;
  pointsSelect = null;
  dataByInd = true;
  chart = function(selection) {
    return selection.each(function(data) {
      var g, gEnter, i, na_value, panelheight, points, svg, titlegrp, v, w, x, xaxis, xrange, y, yaxis, yrange, ys;
      if (dataByInd) {
        x = data.map(function(d) {
          return d[xvar];
        });
        y = data.map(function(d) {
          return d[yvar];
        });
      } else {
        x = data[xvar];
        y = data[yvar];
        data = (function() {
          var _results;
          _results = [];
          for (i in x) {
            _results.push([x[i], y[i]]);
          }
          return _results;
        })();
      }
      if (y.every(function(v) {
        return (v != null) && !yNA.force;
      })) {
        yNA.handle = false;
      }
      if (yNA.handle) {
        panelheight = height - (yNA.width + yNA.gap);
      } else {
        panelheight = height;
      }
      if (!xcategories) {
        xcategories = unique(x);
      }
      if (!xcatlabels) {
        xcatlabels = xcategories;
      }
      if (xcatlabels.length !== xcategories.length) {
        throw "xcatlabels.length != xcategories.length";
      }
      if (!(ylim != null)) {
        ylim = [d3.min(y), d3.max(y)];
      }
      na_value = d3.min(y) - 100;
      svg = d3.select(this).selectAll("svg").data([data]);
      gEnter = svg.enter().append("svg").append("g");
      svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      g = svg.select("g");
      g.append("rect").attr("x", margin.left).attr("y", margin.top).attr("height", panelheight).attr("width", width).attr("fill", rectcolor).attr("stroke", "none");
      if (yNA.handle) {
        g.append("rect").attr("x", margin.left).attr("y", margin.top + height - yNA.width).attr("height", yNA.width).attr("width", width).attr("fill", rectcolor).attr("stroke", "none");
      }
      xrange = [margin.left + margin.inner, margin.left + width - margin.inner];
      xscale.domain(xcategories).rangePoints(xrange, 1);
      if (xjitter === null) {
        w = (xrange[1] - xrange[0]) / xcategories.length;
        xjitter = (function() {
          var _i, _len, _ref, _results;
          _ref = d3.range(x.length);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push((Math.random() - 0.5) * w * 0.2);
          }
          return _results;
        })();
      } else {
        if (typeof xjitter === 'number') {
          xjitter = [xjitter];
        }
        if (xjitter.length === 1) {
          xjitter = (function() {
            var _i, _len, _ref, _results;
            _ref = d3.range(x.length);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              v = _ref[_i];
              _results.push(xjitter[0]);
            }
            return _results;
          })();
        }
      }
      if (xjitter.length !== x.length) {
        throw "xjitter.length != x.length";
      }
      yrange = [margin.top + panelheight - margin.inner, margin.top + margin.inner];
      yscale.domain(ylim).range(yrange);
      ys = d3.scale.linear().domain(ylim).range(yrange);
      if (yNA.handle) {
        yscale.domain([na_value].concat(ylim)).range([height + margin.top - yNA.width / 2].concat(yrange));
        y = y.map(function(e) {
          if (e != null) {
            return e;
          } else {
            return na_value;
          }
        });
      }
      if (!(yticks != null)) {
        yticks = ys.ticks(nyticks);
      }
      titlegrp = g.append("g").attr("class", "title").append("text").attr("x", margin.left + width / 2).attr("y", margin.top - titlepos).text(title);
      xaxis = g.append("g").attr("class", "x axis");
      xaxis.selectAll("empty").data(xcategories).enter().append("line").attr("x1", function(d) {
        return xscale(d);
      }).attr("x2", function(d) {
        return xscale(d);
      }).attr("y1", margin.top).attr("y2", margin.top + height).attr("fill", "none").attr("stroke", "white").attr("stroke-width", 1).style("pointer-events", "none");
      xaxis.selectAll("empty").data(xcategories).enter().append("text").attr("x", function(d) {
        return xscale(d);
      }).attr("y", margin.top + height + axispos.xlabel).text(function(d, i) {
        return xcatlabels[i];
      });
      xaxis.append("text").attr("class", "title").attr("x", margin.left + width / 2).attr("y", margin.top + height + axispos.xtitle).text(xlab);
      yaxis = g.append("g").attr("class", "y axis");
      yaxis.selectAll("empty").data(yticks).enter().append("line").attr("y1", function(d) {
        return yscale(d);
      }).attr("y2", function(d) {
        return yscale(d);
      }).attr("x1", margin.left).attr("x2", margin.left + width).attr("fill", "none").attr("stroke", "white").attr("stroke-width", 1).style("pointer-events", "none");
      yaxis.selectAll("empty").data(yticks).enter().append("text").attr("y", function(d) {
        return yscale(d);
      }).attr("x", margin.left - axispos.ylabel).text(function(d) {
        return formatAxis(yticks)(d);
      });
      yaxis.append("text").attr("class", "title").attr("y", margin.top + height / 2).attr("x", margin.left - axispos.ytitle).text(ylab).attr("transform", "rotate(270," + (margin.left - axispos.ytitle) + "," + (margin.top + height / 2) + ")");
      if (yNA.handle) {
        yaxis.append("text").attr("x", margin.left - axispos.ylabel).attr("y", margin.top + height - yNA.width / 2).text("N/A");
      }
      points = g.append("g").attr("id", "points");
      pointsSelect = points.selectAll("empty").data(data).enter().append("circle").attr("cx", function(d, i) {
        return xscale(x[i]) + xjitter[i];
      }).attr("cy", function(d, i) {
        return yscale(y[i]);
      }).attr("class", function(d, i) {
        return "pt" + i;
      }).attr("r", pointsize).attr("fill", pointcolor).attr("stroke", pointstroke).attr("stroke-width", "1").attr("opacity", function(d, i) {
        var _ref;
        if (((y[i] != null) || yNA.handle) && (_ref = x[i], __indexOf.call(xcategories, _ref) >= 0)) {
          return 1;
        }
        return 0;
      });
      g.append("rect").attr("x", margin.left).attr("y", margin.top).attr("height", panelheight).attr("width", width).attr("fill", "none").attr("stroke", "black").attr("stroke-width", "none");
      if (yNA.handle) {
        return g.append("rect").attr("x", margin.left).attr("y", margin.top + height - yNA.width).attr("height", yNA.width).attr("width", width).attr("fill", "none").attr("stroke", "black").attr("stroke-width", "none");
      }
    });
  };
  chart.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return chart;
  };
  chart.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return chart;
  };
  chart.margin = function(value) {
    if (!arguments.length) {
      return margin;
    }
    margin = value;
    return chart;
  };
  chart.axispos = function(value) {
    if (!arguments.length) {
      return axispos;
    }
    axispos = value;
    return chart;
  };
  chart.titlepos = function(value) {
    if (!arguments.length) {
      return titlepos;
    }
    titlepos;
    return chart;
  };
  chart.xcategories = function(value) {
    if (!arguments.length) {
      return xcategories;
    }
    xcategories = value;
    return chart;
  };
  chart.xcatlabels = function(value) {
    if (!arguments.length) {
      return xcatlabels;
    }
    xcatlabels = value;
    return chart;
  };
  chart.xjitter = function(value) {
    if (!arguments.length) {
      return xjitter;
    }
    xjitter = value;
    return chart;
  };
  chart.ylim = function(value) {
    if (!arguments.length) {
      return ylim;
    }
    ylim = value;
    return chart;
  };
  chart.nyticks = function(value) {
    if (!arguments.length) {
      return nyticks;
    }
    nyticks = value;
    return chart;
  };
  chart.yticks = function(value) {
    if (!arguments.length) {
      return yticks;
    }
    yticks = value;
    return chart;
  };
  chart.rectcolor = function(value) {
    if (!arguments.length) {
      return rectcolor;
    }
    rectcolor = value;
    return chart;
  };
  chart.pointcolor = function(value) {
    if (!arguments.length) {
      return pointcolor;
    }
    pointcolor = value;
    return chart;
  };
  chart.pointsize = function(value) {
    if (!arguments.length) {
      return pointsize;
    }
    pointsize = value;
    return chart;
  };
  chart.pointstroke = function(value) {
    if (!arguments.length) {
      return pointstroke;
    }
    pointstroke = value;
    return chart;
  };
  chart.dataByInd = function(value) {
    if (!arguments.length) {
      return dataByInd;
    }
    dataByInd = value;
    return chart;
  };
  chart.title = function(value) {
    if (!arguments.length) {
      return title;
    }
    title = value;
    return chart;
  };
  chart.xlab = function(value) {
    if (!arguments.length) {
      return xlab;
    }
    xlab = value;
    return chart;
  };
  chart.ylab = function(value) {
    if (!arguments.length) {
      return ylab;
    }
    ylab = value;
    return chart;
  };
  chart.xvar = function(value) {
    if (!arguments.length) {
      return xvar;
    }
    xvar = value;
    return chart;
  };
  chart.yvar = function(value) {
    if (!arguments.length) {
      return yvar;
    }
    yvar = value;
    return chart;
  };
  chart.yNA = function(value) {
    if (!arguments.length) {
      return yNA;
    }
    yNA = value;
    return chart;
  };
  chart.yscale = function() {
    return yscale;
  };
  chart.xscale = function() {
    return xscale;
  };
  chart.pointsSelect = function() {
    return pointsSelect;
  };
  return chart;
};

formatAxis = function(d) {
  var ndig;
  d = d[1] - d[0];
  ndig = Math.floor(Math.log(d % 10) / Math.log(10));
  if (ndig > 0) {
    ndig = 0;
  }
  ndig = Math.abs(ndig);
  return d3.format("." + ndig + "f");
};

unique = function(x) {
  var output, v, _i, _len, _results;
  output = {};
  for (_i = 0, _len = x.length; _i < _len; _i++) {
    v = x[_i];
    if (v) {
      output[v] = v;
    }
  }
  _results = [];
  for (v in output) {
    _results.push(output[v]);
  }
  return _results;
};
